export interface User {
  id: string;                   // UUID - primary identifier  
  email: string;                // Required - primary registration field
  username: string;             // Required - unique username
  name?: {                      // Optional - structured name
    first_name: string;
    last_name: string;
  };
  phone?: string;               // Optional - phone number
  address?: string;             // Optional - physical address
  walletAddress: string;        // Required - generated by WalletConnect/Reown
  ensName?: string;             // Optional ENS name on Base
  membershipTierId: string;     // Required - defaults to '1' (Basic)
  membershipAssignedAt: Date;   // Required
  isWalletVerified: boolean;    // Required - starts false, verified via WalletConnect
  walletType: string;           // Required - always 'WalletConnect' for generated wallets
  lastWalletConnection?: Date;  // Optional
  createdAt: Date;
  updatedAt: Date;
}

export interface CreateUserRequest {
  email: string;                // Required - primary field
  username: string;             // Required - unique username
  name?: {                      // Optional - structured name
    first_name: string;
    last_name: string;
  };
  phone?: string;               // Optional - phone number
  address?: string;             // Optional - physical address
}

export interface WalletGeneratedRequest {
  userId: string;               // User who requested wallet generation
  walletAddress: string;        // Generated wallet address from WalletConnect/Reown
  signature: string;            // Verification signature
  message: string;              // Signed message
}

export interface UpdateUserRequest {
  username?: string;            // Can update username (must be unique)
  name?: {                      // Can update structured name
    first_name: string;
    last_name: string;
  };
  email?: string;               // Can update email (must be unique)
  phone?: string;               // Can update phone number
  address?: string;             // Can update physical address
  ensName?: string;             // Can update ENS name
}

export interface UserResponse {
  id: string;
  email: string;
  username: string;
  name?: {                      // Structured name in response
    first_name: string;
    last_name: string;
  };
  phone?: string;               // Phone number in response
  address?: string;             // Physical address in response
  walletAddress?: string;       // Only present after wallet generation
  ensName?: string;
  membershipTier?: {
    id: string;
    name: string;
    price: number;
    features: string[];
  };
  membershipAssignedAt: string;
  isWalletVerified: boolean;
  walletType: string;
  lastWalletConnection?: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateUserResponse {
  success: boolean;
  user: UserResponse;
  message: string;
  nextStep: 'generate_wallet'; // Always next step after registration
}

export interface WalletGeneratedResponse {
  success: boolean;
  user: UserResponse;
  walletGenerated: boolean;
  message: string;
}

// Base blockchain constants
export const BASE_CHAIN = {
  chainId: 8453,
  name: 'Base',
  rpcUrl: 'https://mainnet.base.org',
  blockExplorer: 'https://basescan.org'
} as const;

// Supported wallet types
export const SUPPORTED_WALLET_TYPES = [
  'MetaMask',
  'Coinbase Wallet', 
  'WalletConnect',
  'Rainbow',
  'Frame'
] as const;

export type WalletType = typeof SUPPORTED_WALLET_TYPES[number];